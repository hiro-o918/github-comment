"use strict";(self.webpackChunkgithub_comment=self.webpackChunkgithub_comment||[]).push([[13],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),u=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=u(n),d=r,f=s["".concat(m,".").concat(d)]||s[d]||c[d]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=s;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4761:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return m},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:300},m="Hide comments",u={unversionedId:"hide",id:"hide",title:"Hide comments",description:"#210",source:"@site/docs/hide.md",sourceDirName:".",slug:"/hide",permalink:"/github-comment/hide",editUrl:"https://github.com/suzuki-shunsuke/github-comment-docs/edit/main/docs/hide.md",tags:[],version:"current",sidebarPosition:300,frontMatter:{sidebar_position:300},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/github-comment/getting-started"},next:{title:"Usage",permalink:"/github-comment/usage"}},p={},c=[],s={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hide-comments"},"Hide comments"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/suzuki-shunsuke/github-comment/pull/210"},"#210")),(0,o.kt)("p",null,"When github-comment is used at CI, github-comment posts a comment at every builds.\nSo outdated comments would remain.\nYou would like to hide outdated comments."),(0,o.kt)("p",null,"By the subcommand ",(0,o.kt)("inlineCode",{parentName:"p"},"hide"),", you can hide outdated comments.\nFrom github-comment v3, github-comments injects meta data like SHA1 into comments as HTML comment."),(0,o.kt)("p",null,"e.g."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\x3c!-- github-comment: {"JobID":"xxx","JobName":"plan","SHA1":"79acc0778da6660712a65fd41a48b72cb7ad16c0","TemplateKey":"default","Vars":{}} --\x3e\n')),(0,o.kt)("p",null,"The following meta data is injected."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"JobName (support only some CI platform)"),(0,o.kt)("li",{parentName:"ul"},"JobID (support only some CI platform)"),(0,o.kt)("li",{parentName:"ul"},"WorkflowName (support only some CI platform)"),(0,o.kt)("li",{parentName:"ul"},"TemplateKey"),(0,o.kt)("li",{parentName:"ul"},"Vars"),(0,o.kt)("li",{parentName:"ul"},"SHA1")),(0,o.kt)("p",null,"From github-comment v4, only variables specified by ",(0,o.kt)("inlineCode",{parentName:"p"},"embedded_var_names")," are embedded into the comment."),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"hide")," command, github-comment does the following things."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"gets the list of pull request (issue) comments"),(0,o.kt)("li",{parentName:"ol"},"extracts the injected meta data from comments"),(0,o.kt)("li",{parentName:"ol"},"hide comments which match the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md"},"expr")," expression")),(0,o.kt)("p",null,"The following variable is passed to the expression."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Commit:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Org"),(0,o.kt)("li",{parentName:"ul"},"Repo"),(0,o.kt)("li",{parentName:"ul"},"PRNumber"),(0,o.kt)("li",{parentName:"ul"},"SHA1"))),(0,o.kt)("li",{parentName:"ul"},"Comment",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Body"),(0,o.kt)("li",{parentName:"ul"},"HasMeta"),(0,o.kt)("li",{parentName:"ul"},"Meta",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"SHA1"),(0,o.kt)("li",{parentName:"ul"},"TemplateKey"),(0,o.kt)("li",{parentName:"ul"},"Vars"))))),(0,o.kt)("li",{parentName:"ul"},"HideKey"),(0,o.kt)("li",{parentName:"ul"},"Vars"),(0,o.kt)("li",{parentName:"ul"},"Env: ",(0,o.kt)("inlineCode",{parentName:"li"},"func(string) string"))),(0,o.kt)("p",null,"The default condition is ",(0,o.kt)("inlineCode",{parentName:"p"},"Comment.HasMeta && Comment.Meta.SHA1 != Commit.SHA1"),".\nyou can configure the condition in the configuration file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'hide:\n  default: "true"\n  hello: \'Comment.HasMeta && (Comment.Meta.SHA1 != Commit.SHA1 && Comment.Meta.Vars.target == "hello")\'\n')),(0,o.kt)("p",null,"you can specify the template with ",(0,o.kt)("inlineCode",{parentName:"p"},"--hide-key (-k)")," option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ github-comment hide -k hello\n")),(0,o.kt)("p",null,"If the template isn't specified, the template ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," is used."),(0,o.kt)("p",null,"you can specify the condition with ",(0,o.kt)("inlineCode",{parentName:"p"},"-condition")," option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ github-comment hide -condition 'Comment.Body contains \"foo\"'\n")))}d.isMDXComponent=!0}}]);